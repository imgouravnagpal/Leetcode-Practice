class Solution {
public:
    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {
        if(n==0)
            return {};
        if(n==1)
            return {0};
        vector<vector<int>> adj(n);
        int *freq = new int[n];
        for(int i=0;i<n;i++)
        {
            freq[i] = 0;
        }
        for(int i=0;i<edges.size();i++)
        {
            adj[edges[i][0]].push_back(edges[i][1]);
            adj[edges[i][1]].push_back(edges[i][0]);
            freq[edges[i][1]]++;
            freq[edges[i][0]]++;
        }
        queue<int> pending;
        for(int i=0;i<n;i++)
        {
            if(freq[i] == 1)
            {
                pending.push(i);
            }
        }
        vector<int> ans;
        while(!pending.empty())
        {
            ans.clear();
            int size = pending.size();
            for(int i=0;i<size;i++)
            {
                int top = pending.front();
                pending.pop();
                ans.push_back(top);
                for(auto &neighbor : adj[top])
                {
                    freq[neighbor]--;
                    if(freq[neighbor]==1)
                    {
                        pending.push(neighbor);
                    }
                }
            }
            }
            
        
        return ans;
    }
};
