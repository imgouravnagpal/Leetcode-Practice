class Solution {
public:
    int n,m;
    bool **visited;
    void dfs(vector<vector<char>> &grid,int i,int j)
    {
        if(i>=n||i<0||j>=m||j<0)
        {
            return;
        }
        visited[i][j] = 1;
        if(i+1 < n && grid[i+1][j] == '1' && !visited[i+1][j])
        {
            dfs(grid,i+1,j);
        }
        if(i-1 >=0 && grid[i-1][j] == '1' && !visited[i-1][j])
        {
            dfs(grid,i-1,j);
        }
        if(j+1 < m && grid[i][j+1] == '1' && !visited[i][j+1])
        {
            dfs(grid,i,j+1);
        }
        if(j-1 >=0 && grid[i][j-1] == '1' && !visited[i][j-1])
        {
            dfs(grid,i,j-1);
        }
        
    }
    int numIslands(vector<vector<char>>& grid) {
        n = grid.size();
        m = grid[0].size();
        int count = 0;
        visited = new bool*[n];
        for(int i=0;i<n;i++)
        {
            visited[i] = new bool[m];
            for(int j =0;j<m;j++)
            {
                visited[i][j] = false;
            }
        }
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(!visited[i][j] && grid[i][j] == '1')
                {
                    dfs(grid,i,j);
                    count++;
                }
            }
        }
        return count;
    }
};
