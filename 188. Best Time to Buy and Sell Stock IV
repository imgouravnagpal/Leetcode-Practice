class Solution {
public:
    int maxProfit(int k, vector<int>& prices,int si,vector<vector<int>> &memo) {
        if(si == prices.size() || k==0) return 0;
        if(memo[si][k] != -1)
        {
            return memo[si][k];
        }
        vector<int> bdde;
        int smallans = 0;
        for(int i=si+1;i<prices.size();i++)
        {
            if(prices[i] > prices[si]) bdde.push_back(i);
            else break;
        }
        for(auto element : bdde)
        {
            int current = maxProfit(k-1,prices,element+1,memo) + prices[element] - prices[si];
            smallans = max(smallans,current);
        }
        
        int alternative = maxProfit(k,prices,si+1,memo);
        
        return memo[si][k] = max(alternative,smallans);
        
        
    }
    int maxProfit(int k, vector<int>& prices)
    {
        int n = prices.size();
        vector<vector<int>> memo(n+1,vector<int>(k+1,-1));
        return maxProfit(k,prices,0,memo);
    }
};
